# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
}

type Tool {
  id: ID!
  name: String
  description: Tool_description_Document
  challenge: Tool_challenge_Document
  resource: Tool_resource_Document
  categories(
    where: CategoryWhereInput! = {}
    orderBy: [CategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Category!]
  categoriesCount(where: CategoryWhereInput! = {}): Int
  skills(
    where: SkillWhereInput! = {}
    orderBy: [SkillOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Skill!]
  skillsCount(where: SkillWhereInput! = {}): Int
}

type Tool_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type Tool_challenge_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type Tool_resource_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ToolWhereUniqueInput {
  id: ID
}

input ToolWhereInput {
  AND: [ToolWhereInput!]
  OR: [ToolWhereInput!]
  NOT: [ToolWhereInput!]
  id: IDFilter
  name: StringFilter
  categories: CategoryManyRelationFilter
  skills: SkillManyRelationFilter
}

input CategoryManyRelationFilter {
  every: CategoryWhereInput
  some: CategoryWhereInput
  none: CategoryWhereInput
}

input SkillManyRelationFilter {
  every: SkillWhereInput
  some: SkillWhereInput
  none: SkillWhereInput
}

input ToolOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input ToolUpdateInput {
  name: String
  description: JSON
  challenge: JSON
  resource: JSON
  categories: CategoryRelateToManyForUpdateInput
  skills: SkillRelateToManyForUpdateInput
}

input CategoryRelateToManyForUpdateInput {
  disconnect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

input SkillRelateToManyForUpdateInput {
  disconnect: [SkillWhereUniqueInput!]
  set: [SkillWhereUniqueInput!]
  create: [SkillCreateInput!]
  connect: [SkillWhereUniqueInput!]
}

input ToolUpdateArgs {
  where: ToolWhereUniqueInput!
  data: ToolUpdateInput!
}

input ToolCreateInput {
  name: String
  description: JSON
  challenge: JSON
  resource: JSON
  categories: CategoryRelateToManyForCreateInput
  skills: SkillRelateToManyForCreateInput
}

input CategoryRelateToManyForCreateInput {
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

input SkillRelateToManyForCreateInput {
  create: [SkillCreateInput!]
  connect: [SkillWhereUniqueInput!]
}

type Category {
  id: ID!
  name: String
  subtitle: String
  tools(
    where: ToolWhereInput! = {}
    orderBy: [ToolOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tool!]
  toolsCount(where: ToolWhereInput! = {}): Int
  skills(
    where: SkillWhereInput! = {}
    orderBy: [SkillOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Skill!]
  skillsCount(where: SkillWhereInput! = {}): Int
}

input CategoryWhereUniqueInput {
  id: ID
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IDFilter
  name: StringFilter
  subtitle: StringFilter
  tools: ToolManyRelationFilter
  skills: SkillManyRelationFilter
}

input ToolManyRelationFilter {
  every: ToolWhereInput
  some: ToolWhereInput
  none: ToolWhereInput
}

input CategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
  subtitle: OrderDirection
}

input CategoryUpdateInput {
  name: String
  subtitle: String
  tools: ToolRelateToManyForUpdateInput
  skills: SkillRelateToManyForUpdateInput
}

input ToolRelateToManyForUpdateInput {
  disconnect: [ToolWhereUniqueInput!]
  set: [ToolWhereUniqueInput!]
  create: [ToolCreateInput!]
  connect: [ToolWhereUniqueInput!]
}

input CategoryUpdateArgs {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateInput!
}

input CategoryCreateInput {
  name: String
  subtitle: String
  tools: ToolRelateToManyForCreateInput
  skills: SkillRelateToManyForCreateInput
}

input ToolRelateToManyForCreateInput {
  create: [ToolCreateInput!]
  connect: [ToolWhereUniqueInput!]
}

type Skill {
  id: ID!
  name: String
  description: String
  tools(
    where: ToolWhereInput! = {}
    orderBy: [ToolOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tool!]
  toolsCount(where: ToolWhereInput! = {}): Int
  category: Category
}

input SkillWhereUniqueInput {
  id: ID
}

input SkillWhereInput {
  AND: [SkillWhereInput!]
  OR: [SkillWhereInput!]
  NOT: [SkillWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  tools: ToolManyRelationFilter
  category: CategoryWhereInput
}

input SkillOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
}

input SkillUpdateInput {
  name: String
  description: String
  tools: ToolRelateToManyForUpdateInput
  category: CategoryRelateToOneForUpdateInput
}

input CategoryRelateToOneForUpdateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
  disconnect: Boolean
}

input SkillUpdateArgs {
  where: SkillWhereUniqueInput!
  data: SkillUpdateInput!
}

input SkillCreateInput {
  name: String
  description: String
  tools: ToolRelateToManyForCreateInput
  category: CategoryRelateToOneForCreateInput
}

input CategoryRelateToOneForCreateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createTool(data: ToolCreateInput!): Tool
  createTools(data: [ToolCreateInput!]!): [Tool]
  updateTool(where: ToolWhereUniqueInput!, data: ToolUpdateInput!): Tool
  updateTools(data: [ToolUpdateArgs!]!): [Tool]
  deleteTool(where: ToolWhereUniqueInput!): Tool
  deleteTools(where: [ToolWhereUniqueInput!]!): [Tool]
  createCategory(data: CategoryCreateInput!): Category
  createCategories(data: [CategoryCreateInput!]!): [Category]
  updateCategory(
    where: CategoryWhereUniqueInput!
    data: CategoryUpdateInput!
  ): Category
  updateCategories(data: [CategoryUpdateArgs!]!): [Category]
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCategories(where: [CategoryWhereUniqueInput!]!): [Category]
  createSkill(data: SkillCreateInput!): Skill
  createSkills(data: [SkillCreateInput!]!): [Skill]
  updateSkill(where: SkillWhereUniqueInput!, data: SkillUpdateInput!): Skill
  updateSkills(data: [SkillUpdateArgs!]!): [Skill]
  deleteSkill(where: SkillWhereUniqueInput!): Skill
  deleteSkills(where: [SkillWhereUniqueInput!]!): [Skill]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  tools(
    where: ToolWhereInput! = {}
    orderBy: [ToolOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tool!]
  tool(where: ToolWhereUniqueInput!): Tool
  toolsCount(where: ToolWhereInput! = {}): Int
  categories(
    where: CategoryWhereInput! = {}
    orderBy: [CategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Category!]
  category(where: CategoryWhereUniqueInput!): Category
  categoriesCount(where: CategoryWhereInput! = {}): Int
  skills(
    where: SkillWhereInput! = {}
    orderBy: [SkillOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Skill!]
  skill(where: SkillWhereUniqueInput!): Skill
  skillsCount(where: SkillWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
